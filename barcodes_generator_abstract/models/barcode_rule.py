# -*- coding: utf-8 -*-
# Copyright (C) 2014-Today GRAP (http://www.grap.coop)
# Copyright (C) 2016-Today La Louve (http://www.lalouve.net)
# @author: Sylvain LE GAL (https://twitter.com/legalsylvain)
# License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl.html).

from openerp.osv import osv, fields, orm
from openerp.tools.translate import _

_GENERATE_TYPE = [
    ('no', 'No generation'),
    ('manual', 'Base set Manually'),
    ('sequence', 'Base managed by Sequence'),
]


class BarcodeRule(orm.Model):
    _inherit = 'barcode.rule'

    # Compute Section
    def _compute_padding(
            self, cr, uid, ids, field_name, arg, context=None):
        res = {}
        for rule in self.browse(cr, uid, ids, context):
            res[rule.id] = rule.pattern.count('.')
        return res

    # Column Section
    _columns = {
        'generate_type': fields.selection(
            string='Generate Type', selection=_GENERATE_TYPE,
            required=True,
            help="Allow to generate barcode, including a number"
            "  (a base) in the final barcode.\n"
            " 'Base Set Manually' : User should set manually the value of the"
            " barcode base\n"
            " 'Base managed by Sequence': User will use a button to generate a"
            " new base. This base will be generated by a sequence"),

        'generate_model': fields.selection(
            string='Generate Model', selection=[],
            help="if 'Generate Type' is set, mention the model related to this"
            " rule."),

        'padding': fields.function(
            _compute_padding, string='Padding', type='integer',
            store=True),

        'sequence_id': fields.many2one(
            'ir.sequence', string='Sequence'),
    }

    _defaults = {
        'generate_type': 'no',
    }

    # View Section
    def generate_sequence(self, cr, uid, ids, context=None):
        sequence_obj = self.env['ir.sequence']
        for rule in self:
            if rule.generate_type != 'sequence':
                raise osv.except_osv(_('Error'), _(
                    "Generate Sequence is possible only if  'Generate Type'"
                    " is set to 'Base managed by Sequence'"))
            sequence_id = sequence_obj.create(
                cr, uid, self._prepare_sequence(rule), context=context)
            self.write(cr, uid, [rule.id], {
                'sequence_id': sequence_id}, context=context)

    # Custom Section
    def _prepare_sequence(self, cr, uid, rule, context=None):
        return {
            'name': _('Sequence - %s') % rule.name,
            'padding': rule.padding,
        }
